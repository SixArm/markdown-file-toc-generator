#!/usr/bin/env ruby

##
# Markdown TOC generator
#
# Update a markdown file by autogenerating a table of contents,
# based on the markdown headlines.
#
# Syntax:
#
#     markdown-toc-generator <file>
#
# Example:
#
#     markdown-toc-generator example.md
#
# Limits:
#
#  * This does H2 headlines and lesser; this does not do H1 headlines.
#
#  * This needs each headline anchor href to be unique; this does not auto-number them.
#
#
# ## Install
#
# This command uses Ruby.
#
# Verify you have Ruby version 2.5 or better:
#
#     ruby -v
#
# Copy this command to somewhere on your path such as:
#
#     curl https://raw.githubusercontent.com/SixArm/markdown-toc-generator/master/markdown-toc-generator --output /usr/local/bin/markdown-toc-generator
#
# TODO: transition this to a gem.
#
#
# ## How it works
#
# The command parses the Markdown file using GitHub's HTML pipeline.
#
# Example Markdown headline:
#
#     ## Hello World
#
# The pipeline generates a headline anchor href string:
#
#     hello-world
#
# The command creates a markdown list item:
#
#     * [Hello World](#hello-world)
#
# The command searches the text for the abbreviation "TOC:"
# that starts a line, and is on the line by itself.
#
#     TOC:
#
# The command replaces successive non-blank lines with the markdown list items:
#
#     TOC:
#     * [Hello World](#hello-world)
#
#
# ## Demo
#
# Demonstration Markdown file text, before the generator:
#
#     # Demo
#
#     TOC:
#       
#     ## Alpha
#
#     Lorem ipsum...
#
#     ## Bravo
#     
#     Lorem ipsum...
#
#     ## Charlie
#
#     Lorem ipsum...
#
# Example Markdown file text, after the generator:
#
#     # Demo
#
#     TOC:
#     * [Alpha](#alpha)
#     * [Bravo](#bravo)
#     * [Charlie](#charlie)
#       
#     ## Alpha
#
#     Lorem ipsum...
#
#     ## Bravo
#     
#     Lorem ipsum...
#
#     ## Charlie
#
#     Lorem ipsum...
#
# Example of how GitHub renders the file, approximately:
#
#     <h1>Demo</h1>
#
#     TOC:
#     <ul>
#     <li><a href="#alpha">Alpha</a></li>
#     <li><a href="#bravo">Bravo</a></li>
#     <li><a href="#charlie">Charlie</a></li>
#     </ul>
#  
#     <h2><a class="anchor" href="#alpha" id="user-content-alpha">Alpha</a></h2>
#
#     Lorem ipsum...
#
#     <h2><a class="anchor" href="#bravo" id="user-content-bravo">Bravo</a></h2>
#     
#     Lorem ipsum...
#
#     <h2><a class="anchor" href="#charlie" id="user-content-bravo">Charlie</a></h2>
#
#     Lorem ipsum...
#
# The GitHub automatic rendering typically adds more information, 
# such as an SVG anchor image that shows/hides during hover.
#
#
# ## Tracking
#
# * Command: markdown-toc-generator
# * Version: 1.6.0
# * Created: 2018-02-04
# * Updated: 2018-02-06
# * License: Open source as described in the file LICENSE.md
# * Contact: Joel Parker Henderson (joel@joelparkerhenderson.com)
##

require "tempfile"
require "ostruct"

##
#
# Extensions
#
##

class String

  # Return the index immediately after the first occurrence 
  # of the given substring orpattern (regexp) in str. 
  #
  # Return nil if not found. 
  #
  # The `target` parameter can be a string or a pattern (regexp).
  # 
  # The `offset` parameter specifies the position in the string 
  # to begin the search; the default is 0 i.e. the string start.
  #
  # Examples:
  #
  #     "hello".index_after("ll") => 4
  #
  #     "hello".index_after(/[eo]/) => 2
  #
  def index_after(target, offset = 0)
    i = index(target)
    return nil if nil == i
    length = case target
    when String
      target.length
    when Regexp
      m = match(target, offset)
      m ? m.to_s.length : nil
    else
      raise ArgumentError
    end
    return i + length
  end

  # Replace the contents and taintedness of a string subsection
  # with the corresponding values in `other_string`.
  #
  # The params `start_target` and `stop_target` can each be 
  # a substring or pattern regexp.
  #
  # Examples:
  #
  #     "hello".replace_between("r", "e", "o") => "hero"
  #
  #     "hello".replace_between("r", /[eo]/, /[eo]/) => "hero"
  #
  def replace_between(other_string, start_target, stop_target)
    inner_index = index_after(start_target)
    return self if nil == inner_index
    stop_index = index(stop_target, inner_index)
    return self if nil == stop_index
    return slice(0...inner_index) + other_string + slice(stop_index..-1)
  end

end

class File

  def rewrite(string)
    raise ArgumentError if !string.kind_of?(String)
    tempfile = Tempfile.new
    begin
      tempfile.write(string)
      FileUtils.mv(tempfile.path, self.path)
    ensure
      tempfile.close
      tempfile.unlink
    end
  end

end

##
#
# Adapters
#
##

class Headline < OpenStruct

  def to_markdown
    indent + "* " + link + "\n"
  end

  def indent
    "  " * (level.length - 2)
  end

  def link
    "[#{text}](##{anchor})"
  end

  def anchor
    text.downcase.gsub(/\W+/,'-')
  end

end

module My

  module Markdown

    class String < ::String

      def toc
        return scan(/^(##+) +(.+)\n/).map{|level, text| 
          Headline.new(level: level, text: text).to_markdown 
        }.join
      end

      def refresh_toc(toc_start, toc_stop) 
        replace_between(toc, toc_start, toc_stop)
      end

    end

    class File < ::File

      def slurp
        My::Markdown::String.new(read.scrub)
      end

      def refresh_toc(toc_start, toc_stop)
        rewrite(slurp.refresh_toc(toc_start, toc_stop))
      end

    end

  end

end

# Main: process all the markdown file paths on the command line.
def main
  markdown_file_path, toc_start, toc_stop = ARGV
  toc_start ||= /^TOC:\s*\n/
  toc_stop ||= /^\s*\n/
  file = My::Markdown::File.new(markdown_file_path, "r")
  file.refresh_toc(toc_start, toc_stop)
end

main
